#!/usr/bin/env python3
# -*- mode: python -*-

import re, sys

################################################################################
helptext = """Usage: %s target_file < replacement_snippets

Takes code blocks from stdin, and replaces corresponding blocks in target_file.

""" % sys.argv[0]
################################################################################

def find_blocks(a, fn):
    begs = []
    ends = []
    for i in range(len(a)):
        if re.match(r'//--- The following code', a[i]):
            begs.append(i)
        if re.match(r'//--- End of autogenerated', a[i]):
            ends.append(i)
    if len(begs) != len(ends):
        raise Exception(f"Mismatched number of begin/end of block lines in file {fn}")
    if len(begs) == 0:
        raise Exception(f"No begin/end of block lines in file {fn}")
    result = []
    for i in range(len(begs)):
        ib = begs[i]
        ie = ends[i]
        if ie <= ib:
            raise Exception(f"Mismatched begin/end of block in file {fn}")
        if i > 0 and ib < result[i-1][1]:
            raise Exception(f"Mismatched begins before end of last block in file {fn}")
        result.append((ib, ie))
    return result

def exchange_code(fn2): # from stdin to fn2
    a1 = [line.rstrip() for line in sys.stdin]

    with open(fn2, 'r') as f:
        t2 = f.read()
    a2 = t2.split('\n')

    ipairs1 = find_blocks(a1, "stdin")
    ipairs2 = find_blocks(a2, fn2)

    if len(ipairs1) != len(ipairs2):
        raise Exception("Files have different numbers of blocks")

    for i in reversed(range(len(ipairs1))):
        ib1, ie1 = ipairs1[i]
        ib2, ie2 = ipairs2[i]

        a2 = a2[0:ib2] + a1[ib1:ie1+1] + a2[ie2+1:]

    t = '\n'.join(a2)

    if t==t2:
        return
    with open(fn2, 'w') as f:
        f.write(t)
        f.close()

if __name__ == "__main__":

    if len(sys.argv)<=1 or sys.argv[1]=="-h" or len(sys.argv)<2:
        print(helptext)
        sys.exit(0)

    exchange_code(sys.argv[1])
