#!/bin/env python

# File pro_test_imwx.py:
#   Generate C code for tests of function imwx.
#
# Copyright:
#   (C) 2024 Forschungszentrum Jülich GmbH
#
# Licence:
#   Permission is hereby granted, free of charge, to any person obtaining
#   a copy of this software and associated documentation files (the
#   "Software"), to deal in the Software without restriction, including
#   without limitation the rights to use, copy, modify, merge, publish,
#   distribute, sublicense, and/or sell copies of the Software, and to
#   permit persons to whom the Software is furnished to do so, subject to
#   the following conditions:
#
#   The above copyright notice and this permission notice shall be
#   included in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#   OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Author:
#   Joachim Wuttke, Forschungszentrum Jülich, 2024
#
# Website:
#   http://apps.jcns.fz-juelich.de/libcerf
#
# Revision history:
#   September 2024, initial version.

from mpmath import *
import sys
sys.path.insert(0, '../shared')
import functool as fut
import hp_funcs as hp

mp.dps = 48
mp.pretty = True

tuning = True
final = False # Extra checks, to be turned on in final production run

def tol(x):
    return 2**(-51)

if __name__ == '__main__':

    X = []

    Ni = 1359
    x_fr = .06
    x_to = 200
    step = log10(x_to/x_fr)/(Ni-1)
    for i in range(Ni):
        x = x_fr * 10**(i*step)
        X.append(x)

    Ni = 787
    x_fr = 200
    x_to = 2e8
    step = log10(x_to/x_fr)/(Ni-1)
    for i in range(Ni):
        x = x_fr * 10**(i*step)
        X.append(x)

    fut.print_begin_autogenerated()
    print("static const int nT = %i;" % (len(X)))
    print("static const double T[%i * 3] = { // triples: tolerance, x, expected_y" % (len(X)))
    for x in sorted(X):
        ax = fut.round2(x, 52)
        print("    %g, %s, %s," %
              (tol(x), fut.double2hexstring(ax, 52), fut.double2hexstring(hp.imwx(mpf(ax)))))
    print("};")
    fut.print_end_autogenerated()
